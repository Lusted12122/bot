# bot/games/word_game.py
import random
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.games.word_list import WORDS
from bot.utils.database import update_game_balance
from bot.games.global_game_state import global_wordly_game

class WordGameState(StatesGroup):
    in_game = State()
    in_global_game = State()

async def start_word_game(callback: CallbackQuery, state: FSMContext):
    """Starts the 'Guess the Word' game."""
    category = random.choice(list(WORDS.keys()))
    word = random.choice(WORDS[category])

    await state.update_data(secret_word=word, category=category)
    await state.set_state(WordGameState.in_game)

    await callback.message.edit_text(
        f"–Ø –∑–∞–≥–∞–¥–∞–≤ —Å–ª–æ–≤–æ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: *{category}*.\n"
        f"–£ —Å–ª–æ–≤—ñ *{len(word)}* –ª—ñ—Ç–µ—Ä.\n\n"
        f"–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç:",
        parse_mode="Markdown"
    )
    await callback.answer()

async def process_word_guess(message: Message, state: FSMContext):
    """Processes the user's guess in the 'Guess the Word' game."""
    user_guess = message.text.lower()
    data = await state.get_data()
    secret_word = data.get("secret_word")

    if len(user_guess) != len(secret_word):
        await message.answer(f"–°–ª–æ–≤–æ –ø–æ–≤–∏–Ω–Ω–æ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ {len(secret_word)} –ª—ñ—Ç–µ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    if user_guess == secret_word:
        update_game_balance(message.from_user.id, 50)
        await state.clear()

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó—ñ–≥—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data="word_game")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —ñ–≥–æ—Ä", callback_data="games")]
        ])

        await message.answer(
            f"üéâ –í—ñ—Ç–∞—é! –í–∏ –≤–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ!\n\n–í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ *50G* –Ω–∞ —ñ–≥—Ä–æ–≤–∏–π –±–∞–ª–∞–Ω—Å.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        return

    result_squares = []
    secret_word_list = list(secret_word)

    # First pass for correct letters in the correct position (green)
    for i in range(len(secret_word)):
        if user_guess[i] == secret_word[i]:
            result_squares.append("üü©")
            secret_word_list.remove(user_guess[i])
        else:
            result_squares.append("‚ùì") # Placeholder

    # Second pass for correct letters in the wrong position (orange)
    for i in range(len(secret_word)):
        if result_squares[i] == "‚ùì":
            if user_guess[i] in secret_word_list:
                result_squares[i] = "üüß"
                secret_word_list.remove(user_guess[i])
            else:
                result_squares[i] = "üü•"

    await message.answer(" ".join(result_squares) + "\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def join_global_wordly(callback: CallbackQuery, state: FSMContext):
    """Handles a player joining the global wordly game."""
    if not global_wordly_game["is_active"]:
        await callback.answer("üòî –ì—Ä–∞ –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è.", show_alert=True)
        return

    if callback.from_user.id in global_wordly_game["winners"]:
        await callback.answer("üéâ –í–∏ –≤–∂–µ –≤–≥–∞–¥–∞–ª–∏ —Ü–µ —Å–ª–æ–≤–æ!", show_alert=True)
        return

    await state.set_state(WordGameState.in_global_game)
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç —Å–ª–æ–≤–∞:")
    await callback.answer()

async def process_global_word_guess(message: Message, state: FSMContext):
    """Processes the user's guess in the global word game."""
    user_guess = message.text.lower()
    secret_word = global_wordly_game["secret_word"]

    if not global_wordly_game["is_active"]:
        await message.answer("üòî –ì—Ä–∞ –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è.")
        await state.clear()
        return

    if len(user_guess) != len(secret_word):
        await message.answer(f"–°–ª–æ–≤–æ –ø–æ–≤–∏–Ω–Ω–æ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ {len(secret_word)} –ª—ñ—Ç–µ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    if user_guess == secret_word:
        user_id = message.from_user.id
        if user_id not in global_wordly_game["winners"]:
            global_wordly_game["winners"].append(user_id)
            update_game_balance(user_id, 50) # Or a different reward for the global game
            await message.answer(f"üèÜ –í—ñ—Ç–∞—é! –í–∏ –≤–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ –∞–¥–º—ñ–Ω–∞!\n\n–í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ *50G* –Ω–∞ —ñ–≥—Ä–æ–≤–∏–π –±–∞–ª–∞–Ω—Å.", parse_mode="Markdown")
        else:
            await message.answer("üéâ –í–∏ –≤–∂–µ –≤–≥–∞–¥–∞–ª–∏ —Ü–µ —Å–ª–æ–≤–æ!")
        await state.clear()
        return

    # The same square logic as in the normal game
    result_squares = []
    secret_word_list = list(secret_word)
    for i in range(len(secret_word)):
        if user_guess[i] == secret_word[i]:
            result_squares.append("üü©")
            secret_word_list.remove(user_guess[i])
        else:
            result_squares.append("‚ùì")
    for i in range(len(secret_word)):
        if result_squares[i] == "‚ùì":
            if user_guess[i] in secret_word_list:
                result_squares[i] = "üüß"
                secret_word_list.remove(user_guess[i])
            else:
                result_squares[i] = "üü•"

    await message.answer(" ".join(result_squares) + "\n\n–ù–µ–≤—ñ—Ä–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
