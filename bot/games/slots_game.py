# bot/games/slots_game.py
import random
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.utils.database import get_user_profile, update_game_balance

class SlotsState(StatesGroup):
    get_bet = State()

REELS = ["üçí", "üçã", "üçä", "üçâ", "üçá", "üçì", "üîî", "üíé", "7Ô∏è‚É£"]

async def start_slots_game(callback: CallbackQuery, state: FSMContext):
    """Starts the Slots game and asks for a bet."""
    user_id = callback.from_user.id
    profile_data = get_user_profile(user_id)
    balance = profile_data[1] if profile_data else 0

    await callback.message.edit_text(
        f"üé∞ *–°–ª–æ—Ç–∏*\n\n"
        f"–í–∞—à —ñ–≥—Ä–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: *{balance}G*\n"
        f"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞–≤–∫—É:",
        parse_mode="Markdown"
    )
    await state.set_state(SlotsState.get_bet)
    await callback.answer()

async def process_slots_bet(message: Message, state: FSMContext):
    """Processes the bet and spins the reels."""
    try:
        bet = int(message.text)
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return

    user_id = message.from_user.id
    profile_data = get_user_profile(user_id)
    balance = profile_data[1] if profile_data else 0

    if bet <= 0:
        await message.answer("–°—Ç–∞–≤–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å.")
        return
    if bet > balance:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Ç–∞–∫–æ—ó —Å—Ç–∞–≤–∫–∏.")
        return

    await state.clear()
    update_game_balance(user_id, -bet)

    result = [random.choice(REELS) for _ in range(3)]

    winnings = 0
    if result[0] == result[1] == result[2]:
        if result[0] == "7Ô∏è‚É£":
            winnings = bet * 10
        elif result[0] == "üíé":
            winnings = bet * 7
        else:
            winnings = bet * 5
        result_text = f"üéâ –î–∂–µ–∫–ø–æ—Ç! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ *{winnings}G*!"
    elif result[0] == result[1] or result[1] == result[2]:
        winnings = bet * 2
        result_text = f"üëç –ù–µ–ø–æ–≥–∞–Ω–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ *{winnings}G*!"
    else:
        result_text = f"üòî –ù–∞ –∂–∞–ª—å, –≤–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏ *{bet}G*."

    if winnings > 0:
        update_game_balance(user_id, winnings)

    new_balance = get_user_profile(user_id)[1]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ó—ñ–≥—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data="slots")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —ñ–≥–æ—Ä", callback_data="games")]
    ])

    await message.answer(
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: [{result[0]}] [{result[1]}] [{result[2]}]\n\n"
        f"{result_text}\n\n–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: *{new_balance}G*",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
